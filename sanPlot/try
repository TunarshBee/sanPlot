"from matplotlib import pyplot as plt
import numpy as np

print(plt.style.available)

class Bar:
    def __init__(
        self,
        x_values,
        y_values,
        title: str = None,
        x_ttl: str = None,
        y_ttl: str = None,
        label: str = None,
        graphStyle: str = None,
        cmcStyle: bool = None,
        color: str = None,
        save: str = None,
        alpha: int = None,
        width: int = None,
        idxwidth: int = None,
    ):
        self.x_values = x_values
        self.y_values = y_values
        self.title = title
        self.x_ttl = x_ttl
        self.y_ttl = y_ttl
        self.label = label
        self.style = graphStyle
        self.cmcStyle = cmcStyle
        self.color = color
        self.save = save
        self.width = width
        self.alpha = alpha
        self.idxwidth = idxwidth

    def render(self):
        plt.style.use(self.style) if self.style else plt.style.use("seaborn")

        x_indexes = np.arange(len(self.x_values))
        plt.bar(
            x_indexes,
            self.y_values,
            color=self.color if self.color else None,
            alpha=self.alpha if self.alpha else None,
            label=self.label if self.label else None,
        )
        # if plt is more than one,
        # you must specify idxwidth if you are plotting multiple bar charts at once
        plt.bar(
            x_indexes(self.idxwidth),
            self.y_values,
            width=self.width,
            color=self.color,
            alpha=self.alpha,
            label=self.label,
        ) if self.idxwidth else " "
        plt.xticks(ticks=x_indexes, labels=self.x_values)
        plt.xlabel(self.x_ttl) if self.x_ttl else ""
        plt.ylabel(self.y_ttl) if self.y_ttl else ""
        plt.title(self.title) if self.title else ""
        plt.legend(loc="upper left") if self.label else ""
        plt.savefig(self.save) if self.save else ""
        plt.tight_layout()
        plt.show()
from matplotlib import pyplot as plt
class Line:
    def __init__(
        self,
        x_values,
        y_values,
        title: str = None,
        x_ttl: str = None,
        y_ttl: str = None,
        color: str = None,
        lnStyle: str = None,
        marker: str = None,
        linewidth: str = None,
        label: str = None,
        cmcStyle: bool = None,
        graphStyle: str = None,
        save: str = None,
        grid: bool = None,
    ):
        self.x_values = x_values
        self.y_values = y_values
        self.title = title
        self.x_ttl = x_ttl
        self.y_ttl = y_ttl
        self.marker = marker
        self.label = label
        self.style = graphStyle
        self.cmcStyle = cmcStyle
        self.color = color
        self.linewidth = linewidth
        self.lnStyle = lnStyle
        self.save = save
        self.grid = grid

    def render(self):
        plt.style.use(self.style) if self.style else plt.style.use("seaborn")
        plt.plot(
            self.x_values,
            self.y_values,
            linewidth=self.linewidth,
            color=self.color,
            label=self.label,
            marker=self.marker,
            linestyle=self.lnstyle if self.lnStyle else None,
        )
        plt.xlabel(self.x_ttl) if self.x_ttl else ""
        plt.ylabel(self.y_ttl) if self.y_ttl else ""
        plt.title(self.title) if self.title else ""
        plt.legend(loc="upper left") if self.label else ""
        plt.savefig(self.save) if self.save else ""
        plt.grid(True) if self.grid else False
        plt.tight_layout()
        plt.show()

from matplotlib import pyplot as plt

class Scatter:
    def __init__(
        self,
        x_values,
        y_values,
        title: str,
        x_ttl: str = None,
        y_ttl: str = None,
        color: any = None,
        marker: str = None,
        label: str = None,
        cmcStyle: bool = None,
        graphStyle: str = None,
        save: str = None,
        alpha: float = None,
        linewidth: int = None,
        cbar: str = None,
        cmap: str = None,
        size: any = None,
        logscalex: bool = None,
        logscaley: bool = None,
        edgcolor: str = None,
    ):
        self.x_values = x_values
        self.y_values = y_values
        self.title = title
        self.x_ttl = x_ttl
        self.y_ttl = y_ttl
        self.label = label
        self.style = graphStyle
        self.cmcStyle = cmcStyle
        self.color = color
        self.save = save
        self.linewidth = linewidth
        self.marker = marker
        self.alpha = alpha
        self.cbar = cbar
        self.cmap = cmap
        self.size = size
        self.edgcolor = edgcolor
        self.logscalex = logscalex
        self.logscaley = logscaley

    def render(self):
        plt.style.use(self.style) if self.style else plt.style.use("seaborn")

        plt.scatter(
            self.x_values,
            self.y_values,
            s=self.size if self.size else None,
            c=self.color if self.color else None,
            alpha=self.alpha if self.alpha else None,
            linewidth=self.linewidth if self.linewidth else None,
            edgecolor=self.edgcolor if self.edgcolor else None,
            cmap= self.cmap if self.cmap else None,
            marker= self.marker if self.marker else None,
        )
        colorBar = plt.colorbar() if self.cbar else ""
        colorBar.set_label(self.cbar) if colorBar else ""
        plt.xlabel(self.x_ttl) if self.x_ttl else ""
        plt.ylabel(self.y_ttl) if self.y_ttl else ""
        plt.title(self.title) if self.title else ""
        plt.legend(loc="upper left") if self.label else ""
        plt.savefig(self.save) if self.save else ""
        plt.tight_layout()
        plt.show()
import circlify
import matplotlib.pyplot as plt

data = [
    {
        "id": "World",
        "datum": 6964195249,
        "children": [
            {
                "id": "North America",
                "datum": 450448697,
                "children": [
                    {"id": "United States", "datum": 308865000},
                    {"id": "Mexico", "datum": 107550697},
                    {"id": "Canada", "datum": 34033000},
                ],
            },
            {
                "id": "South America",
                "datum": 278095425,
                "children": [
                    {"id": "Brazil", "datum": 192612000},
                    {"id": "Colombia", "datum": 45349000},
                    {"id": "Argentina", "datum": 40134425},
                ],
            },
            {
                "id": "Europe",
                "datum": 209246682,
                "children": [
                    {"id": "Germany", "datum": 81757600},
                    {"id": "France", "datum": 65447374},
                    {"id": "United Kingdom", "datum": 62041708},
                ],
            },
            {
                "id": "Africa",
                "datum": 311929000,
                "children": [
                    {"id": "Nigeria", "datum": 154729000},
                    {"id": "Ethiopia", "datum": 79221000},
                    {"id": "Egypt", "datum": 77979000},
                ],
            },
            {
                "id": "Asia",
                "datum": 2745929500,
                "children": [
                    {"id": "China", "datum": 1336335000},
                    {"id": "India", "datum": 1178225000},
                    {"id": "Indonesia", "datum": 231369500},
                ],
            },
        ],
    }
]


class Circle_Packing:
    
    def __init__(self, data):
        self.data = data
        self.circles = None

    def compute_circle_positions(self):
        self.circles = circlify.circlify(
            self.data,
            show_enclosure=False,
            target_enclosure=circlify.Circle(x=0, y=0, r=1)
        )

    def plot_network_visualization(self):
        fig, ax = plt.subplots(figsize=(10, 19))
        ax.set_title('Repartition of the world population')
        ax.axis('off')

        lim = max(
            max(
                abs(circle.x) + circle.r,
                abs(circle.y) + circle.r,
            )
            for circle in self.circles
        )
        plt.xlim(-lim, lim)
        plt.ylim(-lim, lim)

        for circle in self.circles:
            if circle.level == 2:
                x, y, r = circle
                ax.add_patch(plt.Circle((x, y), r, alpha=0.5, linewidth=2, color="navy"))

        for circle in self.circles:
            if circle.level == 3:
                x, y, r = circle
                label = circle.ex["id"]
                ax.add_patch(plt.Circle((x, y), r, alpha=0.5, linewidth=2, color="#69b3a2"))
                plt.annotate(label, (x, y), ha='center', color="white")

        for circle in self.circles:
            if circle.level == 2:
                x, y, _ = circle
                label = circle.ex["id"]
                plt.annotate(label, (x, y), va='center', ha='center', bbox=dict(facecolor='white', edgecolor='black', boxstyle='round', pad=.5))

        plt.show()
    def docs(self):
        print(data)
        print("world_population_visualizer = WorldPopulationVisualizer(data)\nworld_population_visualizer.compute_circle_positions()\nworld_population_visualizer.plot_network_visualization()")
        
        # sanPlot/network_plot.py
# sanPlot/network_plot.py
import matplotlib.pyplot as plt
import networkx as nx
from netgraph import Graph

class NetworkChart:
    def __init__(self, nodes, edges, color, nodes_to_color):
        self.nodes = nodes
        self.edges = edges
        self.color = color
        self.node_to_color = nodes_to_color

    def generate_node_colors(self):
        self.node_color = {
            node: self.color[community_id]
            for node, community_id in self.node_to_color.items()
        }

    def render(self):
        g = nx.Graph()
        g.add_nodes_from(self.nodes)
        g.add_edges_from(self.edges)

        fig, ax = plt.subplots()

        Graph(
            g,
            node_color=self.node_color,
            node_edge_width=0,
            edge_width=1,
            edge_alpha=1,
            node_layout_kwargs=dict(node_to_community=self.node_to_color),
            node_layout="community",
            edge_layout="bundled",
            ax=ax,
        )
        plt.show()








#sanPlot/charts.py
import matplotlib.pyplot as plt

from .bar import Bar
from .networkViz import NetworkChart
from .line import Line
from .circle_packing_chart import Circle_Packing
from .scatter import Scatter

class Pie:
    def __init__(self, labels, sizes, title):
        self.labels = labels
        self.sizes = sizes
        self.title = title

    def render(self):
        plt.pie(self.sizes, labels=self.labels)
        plt.title(self.title)
        plt.show()